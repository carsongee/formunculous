Please see http://formunculous.org for specific instructions on installation
and configuration, along with news, demonstrations, and other information.

Quickstart:

If you just want to try this out, go to the harness folder and run:
python manage.py syncdb
python manage.py runserver



For production installation:

python setup.py install

After that, add the url handler to your Django url file:
(r'^', include('formunculous.urls')), 

replacing r'^' with whatever start you want to have such as r'^forms/'

Additionally in your django settings file be sure to add these two constants
APP_STORAGE_ROOT = '/path/to/put/uploaded/files'
APP_STORAGE_URL = '/path/to/urls' 
				  e.g. if r'^forms/' above then this would be '/forms/'

The last bit is to add formunculous as an installed app in your settings file.

Add:
'formunculous',
to your INSTALLED_APPS

Additionaly also utilizes the builtin django comments application so
you will also need to add 'django.contrib.comments',
to your INSTALLED_APPS as well.

If you intend on using the email notifications you will need to define
the SERVER_EMAIL and EMAIL_HOST constants in your settings file.  See the
django settings documentation for more details/options.

There are also required media files for formunculous, so you will need to
copy symlink in the $PYTHON_PATH/formunculous/media/formunculous directory
into your MEDIA_ROOT directory for the CSS/JS/Images used by formunculous

**** Important *****

As of version 2.1.0 Formunculous uses json, and either the python cjson or json libraries
are required.  These are common libraries, but they generally come as python eggs
which may cause problems on your Web server depending on the setup.  Generally you will
need to set the "PYTHON_EGG_CACHE" environment variable to a place the Web server has
read/write access in order for it to work properly.


** Upgrading **

If you are upgrading from a previous of version of formunculous there are
likely to be DB Schema changes for added functionality.  After upgrading
always run "python manage.py syncdb" and then check the upgrade directory
for sql files for upgrading the schema.  So if you went from 1.0 to 1.2
for example you will want to apply any and all .sql files that are designated
between those versions to your database.

Of course if you have been using something like Django South, this isn't
an issue, and running "manage.py syncdb" should be adequate.
